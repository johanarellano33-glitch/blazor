@page "/MiVista"
@using xx.Components.Data
@inject Servicios.ServicioControlador ServicioControlador
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

@inject Servicios.ServicioControlador JuegosServicioControlador
 
<h3>Juegos</h3>
 
<div>
<label>
        <input type="checkbox" checked="@mostrarNoJugados" @onchange="CambiarFiltro" />

        Mostrar solo juegos no jugados
</label>
</div>
 
<ul>

    @foreach (var j in juegosFiltrados)

    {
        <li>
            @j.Nombre
            @(j.Jugado ? "(Jugado)" : "(Pendiente)")
            <input type="checkbox" checked="@j.Jugado" @onclick="() => CambiarJugado(j)" />
            <button @onclick="() => EliminarJuego(j.Identificador)">Eliminar</button>
        </li>
    }
</ul>
 
<div>
<input @bind="newJuego.Nombre" placeholder="Agregar juego" />
<button @onclick="AgregarJuego">Agregar juego</button>
</div>
 
@code {

    private List<Juego> juegos = new();
    private List<Juego> juegosFiltrados =>

        mostrarNoJugados ? juegos.Where(j => !j.Jugado).ToList() : juegos;
 
    private Juego newJuego = new();
    private bool mostrarNoJugados = false;

    private async Task EliminarJuego(int identificador)
    {
        await JuegosServicioControlador.EliminarJuego(identificador);
        juegos = await JuegosServicioControlador.ObtenerJuegos();
    }
    private async Task CambiarJugado(Juego j)
    {
        j.Jugado = !j.Jugado;
        Console.WriteLine($"Estado cambiado: {j.Nombre} → {(j.Jugado ? "Jugado" : "Pendiente")}");
        await JuegosServicioControlador.ActualizarJuego(j);
    }
    private async Task CambiarFiltro(ChangeEventArgs e)
    {
        mostrarNoJugados = (bool)e.Value;
        await GuardarPreferenciaFiltro();
    }

    private async Task GuardarPreferenciaFiltro()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "mostrarNoJugados", mostrarNoJugados.ToString());
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error guardando preferencia: {ex.Message}");
        }
    }

    private async Task CargarPreferenciaFiltro()
    {
        try
        {
            var valor = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "mostrarNoJugados");
            if (!string.IsNullOrEmpty(valor))
            {
                mostrarNoJugados = bool.Parse(valor);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cargando preferencia: {ex.Message}");
        }
    }

    private async Task AgregarJuego()
    {
        if (!string.IsNullOrWhiteSpace(newJuego.Nombre))

        {
            await JuegosServicioControlador.AgregarJuego(newJuego);

            juegos = await JuegosServicioControlador.ObtenerJuegos();

            newJuego = new Juego();

        }



    }
 
    protected override async Task OnInitializedAsync()

    {

        juegos = await JuegosServicioControlador.ObtenerJuegos();
        await CargarPreferenciaFiltro();
    }

}
 